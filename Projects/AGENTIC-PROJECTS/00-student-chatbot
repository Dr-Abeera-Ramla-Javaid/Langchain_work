{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNhtXDELhDL4u/fQheJnpRQ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Dr-Abeera-Ramla-Javaid/Langchain_work/blob/main/Projects/AGENTIC-PROJECTS/00-student-chatbot\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install --upgrade transformers\n",
        "!pip install --upgrade torch\n",
        "!pip install python-dateutil\n",
        "\n",
        "from transformers import BlenderbotForConditionalGeneration, BlenderbotTokenizer\n",
        "from datetime import datetime\n",
        "from dateutil import parser\n",
        "import random\n",
        "import torch\n",
        "\n",
        "# Load the Blenderbot model and tokenizer\n",
        "model_name = \"facebook/blenderbot-400M-distill\"\n",
        "tokenizer = BlenderbotTokenizer.from_pretrained(model_name)\n",
        "model = BlenderbotForConditionalGeneration.from_pretrained(model_name)\n",
        "\n",
        "# Ensure we're using GPU if available\n",
        "device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n",
        "model.to(device)\n",
        "\n",
        "def generate_response(context: str) -> str:\n",
        "    \"\"\"\n",
        "    Generate a response from the Blenderbot model given the conversation context.\n",
        "    We'll feed the entire conversation (context) as input, and the model will produce the next response.\n",
        "    \"\"\"\n",
        "    inputs = tokenizer([context], return_tensors='pt').to(device)\n",
        "    reply_ids = model.generate(**inputs, max_length=200)\n",
        "    response = tokenizer.batch_decode(reply_ids, skip_special_tokens=True)[0]\n",
        "    return response\n",
        "\n",
        "def get_study_plan(subjects, hours_per_day, exam_dates):\n",
        "    plan = {}\n",
        "    for subject in subjects:\n",
        "        # Parse the exam date\n",
        "        try:\n",
        "            exam_date = datetime.strptime(exam_dates[subject], \"%Y-%m-%d\")\n",
        "        except ValueError:\n",
        "            print(f\"Invalid date format for {subject}. Skipping this subject.\")\n",
        "            continue\n",
        "\n",
        "        days_left = (exam_date - datetime.now()).days\n",
        "        if days_left <= 0:\n",
        "            print(f\"Exam date for {subject} has already passed or is today. Skipping this subject.\")\n",
        "            continue\n",
        "\n",
        "        # Estimate study hours needed (just a random heuristic here)\n",
        "        hours_needed = random.randint(10, 15)  # Example estimation\n",
        "        hours_per_day_subject = max(hours_needed // days_left, 1)  # At least 1 hour per day\n",
        "\n",
        "        plan[subject] = {\n",
        "            \"exam_date\": exam_date.strftime(\"%Y-%m-%d\"),\n",
        "            \"total_hours_needed\": hours_needed,\n",
        "            \"hours_per_day\": hours_per_day_subject\n",
        "        }\n",
        "    return plan\n",
        "\n",
        "def get_user_input():\n",
        "    subjects = []\n",
        "    exam_dates = {}\n",
        "\n",
        "    # Collect subjects and exam dates\n",
        "    print(\"Let's create your study plan!\")\n",
        "    while True:\n",
        "        subject = input(\"Enter the subject name (or type 'done' to finish): \").strip()\n",
        "        if subject.lower() == 'done':\n",
        "            break\n",
        "        if subject == '':\n",
        "            print(\"Subject name cannot be empty. Please try again.\")\n",
        "            continue\n",
        "        subjects.append(subject)\n",
        "        while True:\n",
        "            exam_date = input(f\"Enter exam date for {subject} (e.g., YYYY-MM-DD, DD/MM/YYYY) or type 'skip' to skip this subject: \").strip()\n",
        "            if exam_date.lower() == 'skip':\n",
        "                print(f\"Skipping {subject}.\")\n",
        "                subjects.pop()  # Remove the subject since it's being skipped\n",
        "                break\n",
        "            try:\n",
        "                # Use dateutil to parse the date\n",
        "                parsed_date = parser.parse(exam_date)\n",
        "                # Convert to YYYY-MM-DD format\n",
        "                formatted_date = parsed_date.strftime(\"%Y-%m-%d\")\n",
        "                exam_dates[subject] = formatted_date\n",
        "                break\n",
        "            except (ValueError, OverflowError):\n",
        "                print(\"Invalid date format. Please enter the date in a recognizable format or type 'skip'.\")\n",
        "\n",
        "    # Collect available study hours per day\n",
        "    while True:\n",
        "        try:\n",
        "            hours_per_day = int(input(\"How many hours can you study per day? \"))\n",
        "            if hours_per_day <= 0:\n",
        "                print(\"Please enter a positive number.\")\n",
        "                continue\n",
        "            break\n",
        "        except ValueError:\n",
        "            print(\"Please enter a valid number.\")\n",
        "\n",
        "    return subjects, exam_dates, hours_per_day\n",
        "\n",
        "def main():\n",
        "    # Get the user's input (subjects, exam dates, hours per day)\n",
        "    subjects, exam_dates, hours_per_day = get_user_input()\n",
        "\n",
        "    if not subjects:\n",
        "        print(\"No subjects entered. Exiting the study planner.\")\n",
        "        return\n",
        "\n",
        "    # Generate the study plan based on the input\n",
        "    study_plan = get_study_plan(subjects, hours_per_day, exam_dates)\n",
        "\n",
        "    if not study_plan:\n",
        "        print(\"No valid study plans could be generated.\")\n",
        "        return\n",
        "\n",
        "    # Display the study plan\n",
        "    print(\"\\nHere is your personalized study plan:\")\n",
        "    for subject, details in study_plan.items():\n",
        "        print(f\"\\nSubject: {subject}\")\n",
        "        print(f\"  Exam Date: {details['exam_date']}\")\n",
        "        print(f\"  Total Hours Needed: {details['total_hours_needed']} hours\")\n",
        "        print(f\"  Hours to Study per Day: {details['hours_per_day']} hours\")\n",
        "\n",
        "    # Initialize conversation context\n",
        "    conversation_context = \"You are a helpful study assistant. The user has just received a study plan and may have questions.\"\n",
        "\n",
        "    # Allow the user to ask additional questions\n",
        "    while True:\n",
        "        user_query = input(\"\\nDo you have any other questions or need more help with your plan? (yes/no): \").strip().lower()\n",
        "        if user_query == 'yes':\n",
        "            user_input = input(\"Please type your question: \").strip()\n",
        "            if user_input == '':\n",
        "                print(\"You didn't type a question. Please try again.\")\n",
        "                continue\n",
        "\n",
        "            # Append to the conversation context\n",
        "            conversation_context += f\"\\nUser: {user_input}\\nAssistant:\"\n",
        "            response = generate_response(conversation_context)\n",
        "            # Append assistant's response to the context\n",
        "            conversation_context += f\" {response}\"\n",
        "            print(f\"Chatbot says: {response}\")\n",
        "        elif user_query == 'no':\n",
        "            print(\"Good luck with your studies! :)\")\n",
        "            break\n",
        "        else:\n",
        "            print(\"Please type 'yes' or 'no'.\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wphZnPFQWTLo",
        "outputId": "3eb3119f-3013-448a-f572-fb9561a88c1b"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: transformers in /usr/local/lib/python3.10/dist-packages (4.47.0)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from transformers) (3.16.1)\n",
            "Requirement already satisfied: huggingface-hub<1.0,>=0.24.0 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.26.5)\n",
            "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.10/dist-packages (from transformers) (1.26.4)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from transformers) (24.2)\n",
            "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.10/dist-packages (from transformers) (6.0.2)\n",
            "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.10/dist-packages (from transformers) (2024.9.11)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from transformers) (2.32.3)\n",
            "Requirement already satisfied: tokenizers<0.22,>=0.21 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.21.0)\n",
            "Requirement already satisfied: safetensors>=0.4.1 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.4.5)\n",
            "Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.10/dist-packages (from transformers) (4.66.6)\n",
            "Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.24.0->transformers) (2024.10.0)\n",
            "Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.24.0->transformers) (4.12.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (3.4.0)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (2.2.3)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (2024.8.30)\n",
            "Requirement already satisfied: torch in /usr/local/lib/python3.10/dist-packages (2.5.1+cu121)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from torch) (3.16.1)\n",
            "Requirement already satisfied: typing-extensions>=4.8.0 in /usr/local/lib/python3.10/dist-packages (from torch) (4.12.2)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch) (3.4.2)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch) (3.1.4)\n",
            "Requirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from torch) (2024.10.0)\n",
            "Requirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.10/dist-packages (from torch) (1.13.1)\n",
            "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from sympy==1.13.1->torch) (1.3.0)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch) (3.0.2)\n",
            "Requirement already satisfied: python-dateutil in /usr/local/lib/python3.10/dist-packages (2.8.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil) (1.17.0)\n",
            "Let's create your study plan!\n",
            "Enter the subject name (or type 'done' to finish): nothing\n",
            "Enter exam date for nothing (e.g., YYYY-MM-DD, DD/MM/YYYY) or type 'skip' to skip this subject: skip\n",
            "Skipping nothing.\n",
            "Enter the subject name (or type 'done' to finish): math\n",
            "Enter exam date for math (e.g., YYYY-MM-DD, DD/MM/YYYY) or type 'skip' to skip this subject: 2025-3-27\n",
            "Enter the subject name (or type 'done' to finish): done\n",
            "How many hours can you study per day? 1\n",
            "\n",
            "Here is your personalized study plan:\n",
            "\n",
            "Subject: math\n",
            "  Exam Date: 2025-03-27\n",
            "  Total Hours Needed: 10 hours\n",
            "  Hours to Study per Day: 1 hours\n",
            "\n",
            "Do you have any other questions or need more help with your plan? (yes/no): no\n",
            "Good luck with your studies! :)\n"
          ]
        }
      ]
    }
  ]
}